name: Test K3s, Kubernetes, and MicroK8s

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
    - test/run-end-to-end.py
    - test/run-conservation-of-broker-pod.py
    - test/run-helm-install-delete.py
    - test/shared_test_code.py
    - .github/workflows/run-test-cases.yml
    - build/containers/Dockerfile.agent
    - build/containers/Dockerfile.controller
    - deployment/helm/**
    - agent/**
    - controller/**
    - shared/**
    - build/setup.sh
    - version.txt
    - build/akri-containers.mk
    - Makefile
  pull_request_target:
    branches: [ main ]
    paths:
    - test/run-end-to-end.py
    - test/run-conservation-of-broker-pod.py
    - test/run-helm-install-delete.py
    - test/shared_test_code.py
    - .github/workflows/run-test-cases.yml
    - build/containers/Dockerfile.agent
    - build/containers/Dockerfile.controller
    - deployment/helm/**
    - agent/**
    - controller/**
    - shared/**
    - build/setup.sh
    - version.txt
    - build/akri-containers.mk
    - Makefile
  push:
    branches: [ main ]
    paths:
    - test/run-end-to-end.py
    - test/run-conservation-of-broker-pod.py
    - test/run-helm-install-delete.py
    - test/shared_test_code.py
    - .github/workflows/run-test-cases.yml
    - build/containers/Dockerfile.agent
    - build/containers/Dockerfile.controller
    - deployment/helm/**
    - agent/**
    - controller/**
    - shared/**
    - build/setup.sh
    - version.txt
    - build/akri-containers.mk
    - Makefile
  release:
    types:
      - published
    
jobs:
  test-cases:
    # Run workflow pull_request if it is NOT a fork, as pull_request_target if it IS a fork
    if: >-
      ( github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.fork == true ) ||
      ( github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false ) ||
      ( !(startsWith(github.event_name, 'pull_request')) )
    runs-on: ubuntu-18.04
    timeout-minutes: 35

    strategy:
      fail-fast: false
      matrix:
        kube-runtime:
          - K3s
          - MicroK8s
          - Kubernetes
        test-case:
          - end-to-end
        include:
          - test-case: end-to-end
            test-file: test/run-end-to-end.py

    steps:
    - name: Checkout the merged commit from PR and base branch
      uses: actions/checkout@v2
      if: github.event_name == 'pull_request_target'
      with:
        # pull_request_target is run in the context of the base repository
        # of the pull request, so the default ref is master branch and
        # ref should be manually set to the head of the PR
        ref: refs/pull/${{ github.event.pull_request.number }}/head

    - name: Checkout the head commit of the branch
      if: ${{ github.event_name != 'pull_request_target' }}
      uses: actions/checkout@v2

    - name: Log into dockerhub to avoid throttled anonymous dockerhub pulls
      run: echo "${{ secrets.DHPASSWORD }}" | docker login --username "${{ secrets.DHUSERNAME }}" --password-stdin

    - name: Log into ghcr to access intermediate build containers
      if: startsWith(github.event_name, 'pull_request')
      run: echo "${{ secrets.crPassword }}" | docker login --username "${{ secrets.crUsername }}" ghcr.io --password-stdin

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
       python-version: 3.8 
    - name: Install Python kubernetes dependency
      run: |
        python -m pip install --upgrade pip
        pip install kubernetes

    - name: Build local containers for PR tests
      if: startsWith(github.event_name, 'pull_request')
      env:
        BUILD_AMD64: 1
        BUILD_ARM32: 0
        BUILD_ARM64: 0 
        PREFIX: ghcr.io/deislabs/akri
        LABEL_PREFIX: pr
      run: |
        make akri-build
        make controller-build-amd64
        make agent-build-amd64
        docker save ${PREFIX}/agent:${LABEL_PREFIX}-amd64 > agent.tar
        docker save ${PREFIX}/controller:${LABEL_PREFIX}-amd64 > controller.tar

    - if: matrix.kube-runtime == 'K3s'
      name: Install K3s
      env:
        INSTALL_K3S_VERSION: v1.18.9+k3s1
      run: |
        sudo curl -sfL https://get.k3s.io | sh -
        sudo addgroup k3s-admin
        sudo adduser $USER k3s-admin
        sudo usermod -a -G k3s-admin $USER
        sudo chgrp k3s-admin /etc/rancher/k3s/k3s.yaml
        sudo chmod g+r /etc/rancher/k3s/k3s.yaml
        sudo chmod 666 /etc/rancher/k3s/* 
        mkdir -p ~/.kube/ && cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        echo '--set agent.host.crictl=/usr/local/bin/crictl --set agent.host.dockerShimSock=/run/k3s/containerd/containerd.sock' > /tmp/cri_args_to_test.txt
        echo 'kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt
        until kubectl get node ${HOSTNAME,,} -o jsonpath='{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep 'Ready=True'; do echo "waiting for k3s to become ready"; sleep 10; done

    - if: (startsWith(github.event_name, 'pull_request')) && (matrix.kube-runtime == 'K3s')
      name: Import local agent and controller to K3s
      run: |
        sudo k3s ctr image import agent.tar
        sudo k3s ctr image import controller.tar

    - if: matrix.kube-runtime == 'Kubernetes'
      name: Install Kubernetes
      run: |
        sudo apt-get update -y
        sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni
        sudo swapoff -a              
        sudo kubeadm init
        sudo mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config
        kubectl taint nodes --all node-role.kubernetes.io/master-
        echo '--set agent.host.crictl=/usr/bin/crictl --set agent.host.dockerShimSock=/var/run/dockershim.sock' > /tmp/cri_args_to_test.txt
        echo 'kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt
        until kubectl get node ${HOSTNAME,,} -o jsonpath='{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status}' | grep 'Ready=True'; do echo "waiting for kubernetes to become ready"; sleep 10; done

    - if: matrix.kube-runtime == 'MicroK8s'
      name: Install MicroK8s
      run: |
        sudo snap install microk8s --classic --channel=1.18/stable
        sudo microk8s status --wait-ready
        sudo usermod -a -G microk8s $USER
        sudo ls -la $HOME/.kube
        echo sudo chown $(id -u):$(id -g) $HOME/.kube
        sudo chown -f -R $USER $HOME/.kube --verbose
        sudo sh -c "microk8s.kubectl config view --raw >~/.kube/config"
        sudo cat ~/.kube/config
        sudo microk8s.enable helm3
        sudo microk8s.enable rbac
        sudo microk8s.enable dns
        echo "--allow-privileged=true" | sudo tee -a /var/snap/microk8s/current/args/kube-apiserver
        sudo microk8s.stop
        sudo microk8s.start
        sudo microk8s.status --wait-ready
        VERSION="v1.17.0"
        curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz
        sudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin
        rm -f crictl-$VERSION-linux-amd64.tar.gz
        echo '--set agent.host.crictl=/usr/local/bin/crictl --set agent.host.dockerShimSock=/var/snap/microk8s/common/run/containerd.sock' > /tmp/cri_args_to_test.txt
        echo 'microk8s kubectl' > /tmp/runtime_cmd_to_test.txt
        echo '~/.kube/config' > /tmp/kubeconfig_path_to_test.txt

    - if: (startsWith(github.event_name, 'pull_request')) && (matrix.kube-runtime == 'MicroK8s')
      name: Import local agent and controller to MicroK8s
      run: |
        sudo microk8s ctr image import agent.tar
        sudo microk8s ctr image import controller.tar

    - name: Add Akri Helm Chart
      run: helm repo add akri-helm-charts https://deislabs.github.io/akri/
    
    # For push and release, we need to wait for the Helm chart and
    # associated containers to build.
    - if: github.event_name == 'push' || github.event_name == 'release'
      name: Set sleep duration before running script to 1500
      run: echo 1500 > /tmp/sleep_duration.txt

    # For pull_request and pull_request_target, use the locally built
    # containers.
    - if: startsWith(github.event_name, 'pull_request')
      name: Tell Helm to use the 'local' labels for container images
      run: |
        git fetch origin main
        git show origin/main:version.txt > /tmp/version_to_test.txt
        echo '--set agent.image.pullPolicy=Never,agent.image.tag=pr-amd64,controller.image.pullPolicy=Never,controller.image.tag=pr-amd64' > /tmp/extra_helm_args.txt
    # For non-PR (i.e. push, release, manual), version.txt is corresponds
    # to an existing Helm chart.
    - if: (!(startsWith(github.event_name, 'pull_request')))
      name: Use current version for push
      run: cat version.txt > /tmp/version_to_test.txt

    # For workflow_dispatch, pull_request and pull_request_target, use the files
    # in deployment/helm as basis for helm install ... this enables us to test
    # any changes made to the helm chart files in a PR (where no helm chart is
    # published)
    - if: github.event_name != 'push' && github.event_name != 'release'
      name: Tell Helm to use the files in deployment/helm to build chart
      run: |
        echo './deployment/helm' > /tmp/helm_chart_location.txt
    # For push, use a specific version of the `akri-dev` charts that are built and
    # published by the helm workflow.
    - if: github.event_name == 'push'
      name: Tell Helm to use the `akri-dev` published charts
      run: |
        echo "akri-helm-charts/akri-dev --version $(cat /tmp/version_to_test.txt)" > /tmp/helm_chart_location.txt
    # For release, use a specific version of the `akri` charts that are built and
    # published by the helm workflow.
    - if: github.event_name == 'release'
      name: Tell Helm to use the `akri` published charts
      run: |
        echo "akri-helm-charts/akri --version $(cat /tmp/version_to_test.txt)" > /tmp/helm_chart_location.txt

    - name: Execute test script ${{ matrix.test-file }}
      run: python ${{ matrix.test-file }}
    - name: Upload Agent log as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.kube-runtime }}-${{ matrix.test-case }}-agent-log
        path: /tmp/agent_log.txt
    - name: Upload controller log as artifact
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.kube-runtime }}-${{ matrix.test-case }}-controller-log
        path: /tmp/controller_log.txt
