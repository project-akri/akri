#
# This Dockerfile is used to create intermediate containers used
# by the Akri build.
#
# Any changes to this file need to be made in its own Pull Request
# and need include a change to Makefile's BUILD_OPENCV_BASE_VERSION.
#
# A second Pull Request should subsequently be made to update
# Makefile's USE_OPENCV_BASE_VERSION.
#

ARG PLATFORM=
FROM mcr.microsoft.com/dotnet/aspnet:3.1-bullseye-slim${PLATFORM} AS base
WORKDIR /app

# Link the container to the Akri repository
LABEL org.opencontainers.image.source https://github.com/project-akri/akri

# based on https://xaviergeerinck.com/opencv-in-dotnet-core
ENV OPENCV_VERSION="4.5.4"
ENV OPENCV_INSTALLATION_DIR="/opt/opencv/"
ENV OPENCV_SHARP_VERSION="4.5.3.20210821"

# Install opencv dependencies
RUN apt-get update && apt-get -y install --no-install-recommends \
    apt-transport-https \
    software-properties-common \
    wget \
    unzip \
    ca-certificates \
    build-essential \
    cmake \
    git \
    libtbb-dev \
    libatlas-base-dev \
    libgtk2.0-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libdc1394-22-dev \
    libxine2-dev \
    libv4l-dev \
    libtheora-dev \
    libvorbis-dev \
    libxvidcore-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev \
    libavresample-dev \
    x264 \
    libtesseract-dev \
    libgdiplus \
    && apt-get -y clean \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir ${OPENCV_INSTALLATION_DIR} && \
	cd ${OPENCV_INSTALLATION_DIR} && \
	wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip -Oopencv-${OPENCV_VERSION}.zip && \
	unzip opencv-${OPENCV_VERSION}.zip && \
	wget https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip -Oopencv_contrib-${OPENCV_VERSION}.zip && \
	unzip opencv_contrib-${OPENCV_VERSION}.zip && \
	rm ${OPENCV_INSTALLATION_DIR}/*.zip && \
	cd ${OPENCV_INSTALLATION_DIR}/opencv-${OPENCV_VERSION} 
	
	
RUN cd ${OPENCV_INSTALLATION_DIR}/opencv-${OPENCV_VERSION} && \
    mkdir build && cd build && \
	cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-${OPENCV_VERSION}/modules \
    -D BUILD_SHARED_LIBS=OFF \
    -D ENABLE_CXX11=ON \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_DOCS=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_TESTS=OFF \
    -D BUILD_JAVA=OFF \
    -D BUILD_opencv_app=OFF \
    -D BUILD_opencv_barcode=OFF \
    -D BUILD_opencv_java_bindings_generator=OFF \
    -D BUILD_opencv_js_bindings_generator=OFF \
    -D BUILD_opencv_python_bindings_generator=OFF \
    -D BUILD_opencv_python_tests=OFF \
    -D BUILD_opencv_ts=OFF \
    -D BUILD_opencv_js=OFF \
    -D BUILD_opencv_bioinspired=OFF \
    -D BUILD_opencv_ccalib=OFF \
    -D BUILD_opencv_datasets=OFF \
    -D BUILD_opencv_dnn_objdetect=OFF \
    -D BUILD_opencv_dpm=OFF \
    -D BUILD_opencv_fuzzy=OFF \
    -D BUILD_opencv_gapi=OFF \
    -D BUILD_opencv_intensity_transform=OFF \
    -D BUILD_opencv_mcc=OFF \
    -D BUILD_opencv_objc_bindings_generator=OFF \
    -D BUILD_opencv_rapid=OFF \
    -D BUILD_opencv_reg=OFF \
    -D BUILD_opencv_stereo=OFF \
    -D BUILD_opencv_structured_light=OFF \
    -D BUILD_opencv_surface_matching=OFF \
    -D BUILD_opencv_videostab=OFF \
    -D BUILD_opencv_wechat_qrcode=OFF \
    -D WITH_GSTREAMER=OFF \
    -D WITH_ADE=OFF \
    -D OPENCV_ENABLE_NONFREE=ON \
    .. && make -j$(nproc) && \
	make install -j8 && \
	ldconfig

RUN cd ${OPENCV_INSTALLATION_DIR} && \
	git clone --depth=1 --branch=${OPENCV_SHARP_VERSION} https://github.com/shimat/opencvsharp.git opencvsharp && \
	cd opencvsharp/src && \
	mkdir build && \
	cd build && \
	cmake -D CMAKE_INSTALL_PREFIX=${OPENCV_INSTALLATION_DIR} .. && \
	make -j$(nproc) && \
	make install && \
	ldconfig && \
	cp OpenCvSharpExtern/libOpenCvSharpExtern.so /usr/lib

# Don't force architecture here as it won't be working as expected
FROM mcr.microsoft.com/dotnet/sdk:3.1-bullseye AS build-dotnet-env

ARG PLATFORM

ENV OPENCV_SHARP_VERSION="4.5.3.20210821"
ENV ARCH=${PLATFORM:--x64}

WORKDIR /
COPY --from=base /usr/lib/libOpenCvSharpExtern.so ./
RUN git clone --depth=1 --branch=${OPENCV_SHARP_VERSION} https://github.com/shimat/opencvsharp.git

# Install Build the C# part of OpenCvSharp
RUN cd /opencvsharp/src/OpenCvSharp && \
    dotnet build -r linux${ARCH%32} -c Release -f netstandard2.0 

RUN cd /opencvsharp/src/OpenCvSharp.Extensions && \
    dotnet build -r linux${ARCH%32} -c Release -f netstandard2.0 

RUN mkdir /opencvsharp/build && \
    cd /opencvsharp/build && \
    cp /opencvsharp/src/OpenCvSharp/bin/$([ -n "$PLATFORM" ] && echo "*")/Release/netstandard2.0/*/* . && \
    cp /opencvsharp/src/OpenCvSharp.Extensions/bin/$([ -n "$PLATFORM" ] && echo "*")/Release/netstandard2.0/*/* .

# Copy over OpenCvSharp binaries and OpenCvSharpExtern shared library
FROM mcr.microsoft.com/dotnet/aspnet:3.1-bullseye-slim${PLATFORM}
WORKDIR /app
COPY --from=build-dotnet-env /opencvsharp/build ./
COPY --from=build-dotnet-env /libOpenCvSharpExtern.so /usr/lib
# Install OpenCVSharpExtern dependencies
RUN apt-get update && apt-get -y install --no-install-recommends \
    libgtk2.0-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libdc1394-22-dev \
    libavresample-dev \
    libtesseract-dev \
    && apt-get -y clean \
    && rm -rf /var/lib/apt/lists/*
