# Default values for akri.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# useLatestContainers is specified if the latest or latest-dev
# tags should be used.  This will be overridden if *.image.tag
# is specified.
useLatestContainers: false

# useDevelopmentContainers is specified if the non-release (*-dev)
# tags should be used.  This will be overridden if *.image.tag
# is specified.
useDevelopmentContainers: true

# imagePullSecrets is the array of secrets needed to pull images.
# This can be set from the helm command line using `--set imagePullSecrets[0].name="mysecret"`
imagePullSecrets: []

# generalize references to `apiGroups` and `apiVersion` values for Akri CRDs
crds:
  group: akri.sh
  version: v0

rbac:
  # enabled defines whether to apply rbac to Akri
  enabled: true

prometheus:
  # enabled defines whether metrics ports are exposed on
  # the Controller and Agent
  enabled: false
  # endpoint is the path the port exposed for metrics
  endpoint: /metrics
  # port is the port that the metrics service is exposed on
  port: 8080
  # portName is the name of the metrics port
  portName: metrics

controller:
  # enabled defines whether to apply the Akri Controller
  enabled: true
  image:
    # repository is the Akri Controller container reference
    repository: ghcr.io/deislabs/akri/controller
    # tag is the Akri Controller container tag
    # controller.yaml will default to v(AppVersion)-dev
    tag:
    # pullPolicy is the Akri Controller pull policy
    pullPolicy: ""
  # onlyOnControlPlane dictates whether the Akri Controller will only run on nodes with 
  # the label with (key, value) of ("node-role.kubernetes.io/master", "")
  onlyOnControlPlane: false
  # allowOnControlPlane dictates whether a toleration will be added to allow to Akri Controller 
  # to run on the control plane node
  allowOnControlPlane: true
  # linuxOnly dictates whether the Akri Controller will only run on a linux node
  linuxOnly: true
  # nodeSelectors is the array of nodeSelectors used to target nodes for the Akri Controller to run on
  # This can be set from the helm command line using `--set controller.nodeSelectors.label="value"`
  nodeSelectors: {}

agent:
  # enabled defines whether to apply the Akri Agent
  enabled: true
  image:
    # repository is the Akri Agent container reference
    repository: ghcr.io/deislabs/akri/agent
    # tag is the Akri Agent container tag
    # agent.yaml will default to v(AppVersion)-dev
    tag:
    # pullPolicy is the Akri Agent pull policy
    pullPolicy: ""
  securityContext: {}
  host:
    # kubeletDevicePlugins is the location of the kubelet device-plugin sockets
    kubeletDevicePlugins: /var/lib/kubelet/device-plugins
    # crictl is the node path to crictl
    crictl: /usr/bin/crictl
    # dockerShimSock is the node path of the docker socket
    dockerShimSock: /var/run/dockershim.sock
    # udev is the node path of udev
    udev: /run/udev
  # allowDebugEcho dictates whether the Akri Agent will allow DebugEcho Configurations
  allowDebugEcho: false
  # linuxOnly dictates whether the Akri Agent will only run on a linux node
  linuxOnly: true

debugEcho:
  # enabled defines whether to load a debugEcho configuration
  enabled: false
  # name is the Kubernetes resource name that will be created for this
  # debugEcho configuration
  name: akri-debug-echo-foo
  # properties is a map of properties that will be passed to any instances
  # created as a result of applying this debugEcho configuration
  properties:
  # capacity is the capacity for any instances created as a result of
  # applying this debugEcho configuration
  capacity: 1
  # descriptions is the list of instances created as a result of
  # applying this debugEcho configuration
  descriptions:
  - "foo0"
  - "foo1"
  # shared defines whether instances created as a result of
  # applying this debugEcho configuration as shared
  shared: true
  brokerPod:
    # container used by debugEcho
    image: nginx:latest
    # pullPolicy is the debugEcho pull policy
    pullPolicy: ""
  instanceService:
    # name is the description of the instance service
    name: akri-debug-echo-foo-instance-service
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 6052
    # targetPort is the service targetPort of the instance service
    targetPort: 6052
    # protocol is the service protocol of the instance service
    protocol: TCP
  configurationService:
    # name is the description of the configuration service
    name: akri-debug-echo-foo-configuration-service
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 6052
    # targetPort is the service targetPort of the instance service
    targetPort: 6052
    # protocol is the service protocol of the instance service
    protocol: TCP

onvif:
  # enabled defines whether to load a onvif configuration
  enabled: false
  # name is the Kubernetes resource name that will be created for this
  # onvif configuration
  name: akri-onvif
  # properties is a map of properties that will be passed to any instances
  # created as a result of applying this onvif configuration
  properties:
  ipAddresses: 
    action: Exclude
    items: []
  macAddresses:
    action: Exclude
    items: []
  scopes:
    action: Exclude
    items: []
  discoveryTimeoutSeconds: 1
  # capacity is the capacity for any instances created as a result of
  # applying this onvif configuration
  capacity: 1
  brokerPod:
    image:
      # repository is the container reference
      repository:
      # pullPolicy is the Akri onvif broker pull policy
      pullPolicy: ""
  # createInstanceServices is specified if a service should automatically be
  # created for each broker pod
  createInstanceServices: true
  instanceService:
    # name is the description of the instance service
    name: akri-onvif-instance-service
    # type is the service type of the instance service
    type: ClusterIP
    # portName is the name of the port
    portName: grpc
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP
  # createConfigurationService is specified if a single service should automatically be
  # created for all broker pods of a Configuration
  createConfigurationService: true
  configurationService:
    # name is the description of the configuration service
    name: akri-onvif-configuration-service
    # type is the service type of the instance service
    type: ClusterIP
    # portName is the name of the port
    portName: grpc
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP

opcua:
  # enabled defines whether to load an OPC UA configuration
  enabled: false
  # name is the Kubernetes resource name that will be created for this
  # OPC UA configuration
  name: akri-opcua
  # properties is a map of properties that will be passed to any instances
  # created as a result of applying this OPC UA configuration
  properties:
  opcuaDiscoveryMethod: standard
  # discoveryUrls is a list of DiscoveryUrls for OPC UA servers
  discoveryUrls:
  - "opc.tcp://localhost:4840/"
  # mountCertificates determines whether to mount into the broker pods k8s Secrets 
  # containing OPC UA client credentials for connecting to OPC UA severs with the 
  # same signing certificate authority.
  # If set to false, the brokers will attempt to make an insecure connection with the servers.
  mountCertificates: false
  # applicationNames is a filter applied to the discovered OPC UA servers to either exclusively
  # include or exclude servers with application names in the applicationNames list.
  applicationNames:
    action: Exclude
    items: []
  # capacity is the capacity for any instances created as a result of
  # applying this OPC UA configuration
  capacity: 1
  brokerPod:
    image:
      # repository is the Akri OPC UA broker container reference
      repository: 
      # pullPolicy is the Akri OPC UA broker pull policy
      pullPolicy: ""
  # createInstanceServices is specified if a service should automatically be
  # created for each broker pod
  createInstanceServices: true
  instanceService:
    # name is the description of the instance service
    name: akri-opcua-instance-service
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP
  # createConfigurationService is specified if a single service should automatically be
  # created for all broker pods of a Configuration
  createConfigurationService: true
  configurationService:
    # name is the description of the configuration service
    name: akri-opcua-configuration-service
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP

udev:
  # enabled defines whether to load a udev configuration
  enabled: false
  # name is the Kubernetes resource name that will be created for this
  # udev configuration
  name: akri-udev
  # properties is a map of properties that will be passed to any instances
  # created as a result of applying this udev configuration
  properties:
  # udevRules is the list of udev rules used to find instances created as a result of
  # applying this udev configuration
  udevRules:
  # capacity is the capacity for any instances created as a result of
  # applying this udev configuration
  capacity: 1
  brokerPod:
    image:
      # repository is the container reference
      repository:
      pullPolicy: ""
    securityContext: {}
  # createInstanceServices is specified if a service should automatically be
  # created for each broker pod
  createInstanceServices: true
  instanceService:
    # portName is the name of the port
    portName: grpc
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP
  # createConfigurationService is specified if a single service should automatically be
  # created for all broker pods of a Configuration
  createConfigurationService: true
  configurationService:
    # portName is the name of the port
    portName: grpc
    # type is the service type of the instance service
    type: ClusterIP
    # port is the service port of the instance service
    port: 80
    # targetPort is the service targetPort of the instance service
    targetPort: 8083
    # protocol is the service protocol of the instance service
    protocol: TCP

# Admission Controllers (Webhooks)
webhookConfiguration:
  # enabled defines whether to apply the Akri Admission Controller (Webhook) for Akri Configurations
  enabled: false
  # name of the webhook
  name: akri-webhook-configuration
  # base64-encoded CA certificate (PEM) used by Kubernetes to validate the Webhook's certificate
  caBundle: null
  image:
    # repository is the Akri Webhook for Configurations image reference
    repository: ghcr.io/deislabs/akri/webhook-configuration
    tag:
    # pullPolicy is the Akri Controller pull policy
    pullPolicy: Always
  # onlyOnControlPlane dictates whether the Akri Controller will only run on nodes with 
  # the label with (key, value) of ("node-role.kubernetes.io/master", "")
  onlyOnControlPlane: false
  # allowOnControlPlane dictates whether a toleration will be added to allow to Akri Controller 
  # to run on the control plane node
  allowOnControlPlane: true
  # linuxOnly dictates whether the Akri Controller will only run on a linux node
  linuxOnly: true
  # nodeSelectors is the array of nodeSelectors used to target nodes for the Akri Controller to run on
  # This can be set from the helm command line using `--set controller.nodeSelectors.label="value"`
  nodeSelectors: {}
